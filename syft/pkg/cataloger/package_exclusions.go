package cataloger

import (
	"golang.org/x/exp/slices"

	"github.com/anchore/syft/syft/artifact"
	"github.com/anchore/syft/syft/pkg"
	"github.com/anchore/syft/syft/pkg/cataloger/alpm"
	"github.com/anchore/syft/syft/pkg/cataloger/apkdb"
	"github.com/anchore/syft/syft/pkg/cataloger/binary"
	"github.com/anchore/syft/syft/pkg/cataloger/deb"
	"github.com/anchore/syft/syft/pkg/cataloger/nix"
)

type CategoryType string

const (
	OsCatalogerType     CategoryType = "os"
	BinaryCatalogerType CategoryType = "binary"
)

var CatalogerTypeIndex = map[CategoryType][]string{
	"os": {
		apkdb.CatalogerName,
		alpm.CatalogerName,
		deb.CatalogerName,
		nix.CatalogerName,
		"rpm-db-cataloger",
		"rpm-file-cataloger",
	},
	"binary": {
		binary.CatalogerName,
	},
}

type PackageExclusionsConfig struct {
	Exclusions []PackageExclusion
}

type PackageExclusion struct {
	RelationshipType artifact.RelationshipType
	ParentType       CategoryType
	ExclusionType    CategoryType
}

// Exclude will remove packages from a collection given the following properties are true
// 1) the relationship between packages is OwnershipByFileOverlap
// 2) the parent is an "os" package
// 3) the child is a synthetic package generated by the binary cataloger
// 4) the package names are identical
// This exclude was implemented as a way to help resolve: https://github.com/anchore/syft/issues/931
func Exclude(r artifact.Relationship, c *pkg.Collection) bool {
	parent := c.Package(r.From.ID())
	if parent == nil {
		return false
	}
	child := c.Package(r.To.ID())
	if child == nil {
		return false
	}

	parentInExclusion := slices.Contains(CatalogerTypeIndex["os"], parent.FoundBy)
	childInExclusion := slices.Contains(CatalogerTypeIndex["binary"], child.FoundBy)

	return artifact.OwnershipByFileOverlapRelationship == r.Type &&
		parentInExclusion &&
		childInExclusion
}
