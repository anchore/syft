package main

import (
	"fmt"
	"os"
	"path"

	"github.com/dave/jennifer/jen"

	"github.com/anchore/syft/syft/internal/sourcemetadata"
)

// This program is invoked from syft/internal and generates sourcemetadata/generated.go

const (
	outputPath = "sourcemetadata/generated.go"
)

func main() {
	types, err := sourcemetadata.DiscoverTypes()
	if err != nil {
		panic(fmt.Errorf("unable to get all metadata type names: %w", err))
	}

	fmt.Printf("updating source metadata type list with %+v types\n", len(types))

	f := jen.NewFile("sourcemetadata")
	f.HeaderComment("DO NOT EDIT: generated by syft/internal/sourcemetadata/generate/main.go")
	for _, typ := range types {
		f.ImportName(typ.FileInfo.PkgPath, path.Base(typ.FileInfo.PkgPath))
	}
	f.Comment("AllTypes returns a list of all source metadata types that syft supports (that are represented in the source.Description.Metadata field).")

	f.Func().Id("AllTypes").Params().Index().Any().BlockFunc(func(g *jen.Group) {
		g.ReturnFunc(func(g *jen.Group) {
			g.Index().Any().ValuesFunc(func(g *jen.Group) {
				for _, typ := range types {
					g.Qual(typ.FileInfo.PkgPath, typ.Spec.Name.String()).Values()
				}
			})
		})
	})

	rendered := fmt.Sprintf("%#v", f)

	fh, err := os.OpenFile(outputPath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		panic(fmt.Errorf("unable to open file: %w", err))
	}
	_, err = fh.WriteString(rendered)
	if err != nil {
		panic(fmt.Errorf("unable to write file: %w", err))
	}
	if err := fh.Close(); err != nil {
		panic(fmt.Errorf("unable to close file: %w", err))
	}
}
