package cyclonedxxml

import (
	"bytes"
	"flag"
	"regexp"
	"testing"

	"github.com/anchore/syft/syft/formats/internal/testutils"
)

var updateSnapshot = flag.Bool("update-cyclonedx-xml", false, "update the *.golden files for cyclone-dx XML encoders")
var updateImage = flag.Bool("update-image", false, "update the golden image used for image encoder testing")

func TestCycloneDxDirectoryEncoder(t *testing.T) {
	dir := t.TempDir()
	testutils.AssertEncoderAgainstGoldenSnapshot(t,
		testutils.EncoderSnapshotTestConfig{
			Subject:                     testutils.DirectoryInput(t, dir),
			Format:                      Format(),
			UpdateSnapshot:              *updateSnapshot,
			PersistRedactionsInSnapshot: true,
			IsJSON:                      false,
			Redactors: []testutils.Redactor{
				redactor{dir: dir}.redact,
			},
		},
	)
}

func TestCycloneDxImageEncoder(t *testing.T) {
	testImage := "image-simple"
	testutils.AssertEncoderAgainstGoldenImageSnapshot(t,
		testutils.ImageSnapshotTestConfig{
			Image:               testImage,
			UpdateImageSnapshot: *updateImage,
		},
		testutils.EncoderSnapshotTestConfig{
			Subject:                     testutils.ImageInput(t, testImage),
			Format:                      Format(),
			UpdateSnapshot:              *updateSnapshot,
			PersistRedactionsInSnapshot: true,
			IsJSON:                      false,
			Redactors: []testutils.Redactor{
				redactor{}.redact,
			},
		},
	)
}

type redactor struct {
	dir string
}

type replacement struct {
	pattern *regexp.Regexp
	replace string
}

func (r replacement) redact(b []byte) []byte {
	return r.pattern.ReplaceAll(b, []byte(r.replace))
}

func (r redactor) redact(s []byte) []byte {
	serialPattern := replacement{
		pattern: regexp.MustCompile(`serialNumber="[a-zA-Z0-9\-:]+"`),
		replace: `serialNumber="redacted"`,
	}
	rfc3339Pattern := replacement{
		pattern: regexp.MustCompile(`([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))`),
		replace: `redacted`,
	}
	sha256Pattern := replacement{
		pattern: regexp.MustCompile(`sha256:[A-Fa-f0-9]{64}`),
		replace: `sha256:redacted`,
	}

	for _, r := range []replacement{serialPattern, rfc3339Pattern, sha256Pattern} {
		s = r.redact(s)
	}

	// the bom-ref will be autogenerated every time, the value here should not be directly tested in snapshot tests
	bomRefPattern := replacement{
		pattern: regexp.MustCompile(`bom-ref="[a-zA-Z0-9\-:]+"`),
		replace: `bom-ref="redacted"`,
	}

	bomRef3339Pattern := replacement{
		pattern: regexp.MustCompile(`([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))`),
		replace: `redacted`,
	}
	for _, r := range []replacement{bomRefPattern, bomRef3339Pattern} {
		s = r.redact(s)
	}

	if r.dir != "" {
		s = bytes.ReplaceAll(s, []byte(r.dir), []byte("redacted"))
	}

	return s
}
